pullgateway可以使用接口进行数据传入
例如
添加单条数据
echo "some_metric 3.14" | curl --data-binary @- http://pushgateway.example.org:9091/metrics/job/some_job
添加更多更复杂数据
cat <<EOF | curl --data-binary @- http://pushgateway.example.org:9091/metrics/job/some_job/instance/some_instance
# TYPE some_metric counter 
some_metric{label="val1"} 42 
# TYPE another_metric gauge 
# HELP another_metric Just an example. 
another_metric 2398.283 
EOF

删除某个组下的某实例的所有数据：
curl -X DELETE http://pushgateway.example.org:9091/metrics/job/some_job/instance/some_instance
删除某个组下的所有数据：
curl -X DELETE http://pushgateway.example.org:9091/metrics/job/some_job

可以发现，pushgateway中的数据是按按照job和instance进行分组分类的，所以这二个参数不可缺少。
因为p8s配置pushgateway的时候，会指定job和instance,但是它只表示pushgateway实例，不能真正表达收集数据的含义。所以，在p8s中配置pushgateway的时候
需要添加honor_labels: true,从而避免收集的数据本身job和instance被覆盖。

另外，为了防止pushgateway重启或意外挂掉，导致数据丢失，我们可以通过 -persistence.file和 -persistence.interval 参数将数据持久化下来。

一些概念

作为新一代的监控框架，Prometheus 具有以下特点：

    强大的多维度数据模型：

    时间序列数据通过 metric 名和键值对来区分。
    所有的 metrics 都可以设置任意的多维标签。
    数据模型更随意，不需要刻意设置为以点分隔的字符串。
    可以对数据模型进行聚合，切割和切片操作。
    支持双精度浮点类型，标签可以设为全 unicode。

    灵活而强大的查询语句（PromQL）：在同一个查询语句，可以对多个 metrics 进行乘法、加法、连接、取分数位等操作。
    易于管理： Prometheus server 是一个单独的二进制文件，可直接在本地工作，不依赖于分布式存储。
    高效：平均每个采样点仅占 3.5 bytes，且一个 Prometheus server 可以处理数百万的 metrics。
    使用 pull 模式采集时间序列数据，这样不仅有利于本机测试而且可以避免有问题的服务器推送坏的 metrics。
    可以采用 push gateway 的方式把时间序列数据推送至 Prometheus server 端。
    可以通过服务发现或者静态配置去获取监控的 targets。
    有多种可视化图形界面。
    易于伸缩。

需要指出的是，由于数据采集可能会有丢失，所以 Prometheus 不适用对采集数据要 100% 准确的情形。
但如果用于记录时间序列数据，Prometheus 具有很大的查询优势，此外，Prometheus 适用于微服务的体系架构。

metric类型
1、counter   一种累加的metric，
2、gauge    一种常规的metric，可以任意加减
3、histogram    可以理解为柱状图，，可以对观察结果采样，分组及统计
4、summary    类似histogram,典型的应用如，请求持续时间，响应大小，提供观测值的count和sum功能，提供百分位的功能。
